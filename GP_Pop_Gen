(defn pd
  [num denom]
  (if (= denom 0)
    0
    (quot num denom)))

(defn select-terminal
  []
  (let [random (rand-int 2)]
    (if (zero? random)
      (rand-nth (concat (list(rand 11)) (list(*  -1 (rand 11)))))
      'x)))

(defn select-fun
  []
  (rand-nth '( + - * pd)))

(defn generate-prog
  [depth]
  (if (zero? depth)
    (select-terminal)
    (list (select-fun)
      (generate-prog (dec depth))
      (generate-prog (dec depth)))))

(defn generate-pop
  [pop-size]
  (take pop-size
        (repeatedly #(generate-prog (rand-int 4)))))


(defn eval-fitness
  [prog]
  (let [prog-fn (make-program-into-fn prog)
        best-fn (make-program-into-fn best-prog)]
         (let [best-range (map best-fn (range 11))
               prog-range (map prog-fn (range 11))]
           (map first (iterate (fn [[real theoretical]]
                                 (* (quot (Math/abs(- theoretical real)) theoretical) 100))
                               [best-range
                               prog-range])))))

(eval-fitness prog)
map (fn [real theoretical]
           (* (quot (Math/abs(- theoretical real)) theoretical) 100))
